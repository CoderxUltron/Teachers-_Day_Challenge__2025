TODAY I TACKELED TWO LEETCODE QUESTION : 

1) Best Time to Buy and Sell Stock
2) MIN STACK


PROBLEM 1 : 
121. Best Time to Buy and Sell Stock

You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

LANGUAGE :  JAVA 

CODE : 


class Solution {
    public int maxProfit(int[] prices) {
         int buy_price = prices[0];

         int profit = 0 ;
         
         for( int i =1 ; i < prices.length ; i++){
            if (buy_price > prices[i]){
                buy_price = prices[i];
            }
            else{
                int current_profit = prices[i] - buy_price ;
                profit = Math.max(current_profit , profit );

            }
         }
         return profit;
        
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


PROBLEM 2  :
155. Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function. 


LANGUAGE : JAVA

CODE : 


class MinStack {

    Stack<Integer> stack ;
    Stack<Integer> minStack ;

    public MinStack() {
        stack = new Stack<>();
        minStack = new Stack<>();
        
    }    
    public void push(int val) {
        stack.push(val);


        if( minStack.isEmpty() ||  val <= minStack.peek()){
            minStack.push(val);
        }        
    }
    
    public void pop() {
       
       int popped_value = stack.pop();

       if( popped_value == minStack.peek()){
        minStack.pop();
       }
        
    }
    
    public int top() {
        
        return stack.peek();
    }
        
    public int getMin() {
        return minStack.peek();
        
    }
}

